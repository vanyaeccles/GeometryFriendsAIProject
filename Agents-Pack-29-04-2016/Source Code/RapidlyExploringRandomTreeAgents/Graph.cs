// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;

namespace GeometryFriendsAgents
{
	public class Graph
	{
		private ArrayList _nodes;
        private ArrayList _nonBusyNodes;
		private Random _rnd;


		public Graph ()
		{
			this._nodes = new ArrayList();
            this._nonBusyNodes = new ArrayList();
			this._rnd = new Random();
		}

		public Graph (State inicial, CircleNode n)
		{
			this._nodes = new ArrayList();
            this._nonBusyNodes = new ArrayList();
			CircleNode initialNode = new CircleNode(inicial);
			this._nodes.Add(initialNode);
            this._nonBusyNodes.Add(initialNode);
            this._rnd = new Random();
		}

        public Graph(State inicial, RectangleNode n)
        {
            this._nodes = new ArrayList();
            this._nonBusyNodes = new ArrayList();
            RectangleNode initialNode = new RectangleNode(inicial);
            this._nodes.Add(initialNode);
            this._nonBusyNodes.Add(initialNode);
            this._rnd = new Random();
        }

		private int getRandomNumber(int maxValue)
		{
			return this._rnd.Next(maxValue);
		}

		public int getSize()
		{
			return this._nodes.Count;
		}

		public void addNode(CircleNode childNode, CircleNode parent, int action)
		{
			if( this.getSize() == 0)
			{
				this._nodes.Add(parent);
			}
			this._nodes.Add(childNode);
			parent.addEdge(childNode, action);
			childNode.setParent(parent);
            _nonBusyNodes.Add(childNode);
		}

        public void addNode(RectangleNode childNode, RectangleNode parent, int action)
        {
            if (this.getSize() == 0)
            {
                this._nodes.Add(parent);
            }
            this._nodes.Add(childNode);
            parent.addEdge(childNode, action);
            childNode.setParent(parent);
            _nonBusyNodes.Add(childNode);
        }

		public CircleNode getRandomNode(CircleNode n)
		{
            // Infinite loop if all Nodes have all their actions explored
            if (this._nonBusyNodes.Count > 0)
                return (CircleNode)this._nonBusyNodes[this.getRandomNumber(this._nonBusyNodes.Count)];
            else
                return null;
		}

        public RectangleNode getRandomNode(RectangleNode n)
        {
            // Infinite loop if all Nodes have all their actions explored
            if (this._nonBusyNodes.Count > 0)
                return (RectangleNode)this._nonBusyNodes[this.getRandomNumber(this._nonBusyNodes.Count)];
            else
                return null;
        }

		public void deleteNode(CircleNode n)
		{
			CircleNode parent = n.getParent();
			parent.removeEdge(n);
			this._nodes.Remove(n);
		}

        public void deleteNode(RectangleNode n)
        {
            RectangleNode parent = n.getParent();
            parent.removeEdge(n);
            this._nodes.Remove(n);
        }

        public ArrayList getAllNodes()
        {
            return this._nodes;
        }

		public void rollBack(CircleNode n)
		{
			CircleNode a = n;
			while( a.isBusy())
			{
				CircleNode parent = a.getParent();
				this.deleteNode(a);
				a = parent;
			}
			return;
		}

        public void rollBack(RectangleNode n)
        {
            RectangleNode a = n;
            while (a.isBusy())
            {
                RectangleNode parent = a.getParent();
                this.deleteNode(a);
                a = parent;
            }
            return;
        }

        public ArrayList NonBusyNodes
        {
            get { return _nonBusyNodes; }
            set { _nonBusyNodes = value; }
        }

		public Path traceBack(CircleNode goalNode)
		{
			Path l = new Path();
			return recursiveTraceBack(goalNode, l);
		}

        public Path traceBack(RectangleNode goalNode)
        {
            Path l = new Path();
            return recursiveTraceBack(goalNode, l);
        }

		private Path recursiveTraceBack(CircleNode goalNode, Path l)
		{
			if(goalNode.getParent() == null)
			{
				l.AddNewPoint(goalNode.getState().point);
				return l;
			}
			else
			{
				this.recursiveTraceBack(goalNode.getParent(), l);
				l.AddNewPoint(goalNode.getState().point);
                if(goalNode.getParent().getParent() != null)
                    if (goalNode.getParent().getState().getVelocityX() != goalNode.getState().getVelocityX() && goalNode.getParent().getState().getPosY() >= goalNode.getState().getPosY())
                        goalNode.getParent().getState().point.TurningPoint = true;

				return l;
			}
		}

        private Path recursiveTraceBack(RectangleNode goalNode, Path l)
        {
            if (goalNode.getParent() == null)
            {
                l.AddNewPoint(goalNode.getState().point);
                return l;
            }
            else
            {
                this.recursiveTraceBack(goalNode.getParent(), l);
                l.AddNewPoint(goalNode.getState().point);
                if (goalNode.getParent().getParent() != null)
                    if (goalNode.getParent().getState().getVelocityX() != goalNode.getState().getVelocityX() && goalNode.getParent().getState().getPosY() >= goalNode.getState().getPosY())
                        goalNode.getParent().getState().point.TurningPoint = true;

                return l;
            }
        }
	}
}

