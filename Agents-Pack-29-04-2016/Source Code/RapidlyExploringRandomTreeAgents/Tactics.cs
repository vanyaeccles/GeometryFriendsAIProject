// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;


namespace GeometryFriendsAgents
{
	abstract public class Tactics
	{
		abstract public CircleNode apply(CircleNode Xinit, InfoDomain _domain, Graph graph);
        abstract public RectangleNode apply(RectangleNode Xinit, InfoDomain _domain, Graph graph);

		public void caughtCollectible(State istate, State s)
		{
			float posX = s.getPosX();
			float posY = s.getPosY();
			float vx = s.getVelocityX();
			float vy = s.getVelocityY();
			float xi = istate.getPosX();
			float yi = istate.getPosY();
            int size = 48;//s.getSizeOfAgent()/2;
			int nrcollectibles = istate.numberOfCollectibles();
			ArrayList collectibles = istate.getCollectibles();

            if (posX != xi && posY != yi)
            {
                yi = posY;
            }

			float colcenterx;
			float colcentery;
			float coltopx;
			float coltopy;
			float colleftx;
			float collefty;
			float colrightx;
			float colrighty;
			float colbottomx;
			float colbottomy;
			int firstn;

			for (int n = 0; n < nrcollectibles; n++)
			{
				firstn = n * 2;
				colcenterx = (float) collectibles[firstn];
				colcentery = (float) collectibles[firstn + 1];
				colleftx = colcenterx - 32;
				colrightx = colcenterx + 32;
				collefty = colcentery;
				colrighty = colcentery;
				coltopy = colcentery - 32;
				colbottomy = colcentery + 32;
				coltopx = colcenterx;
				colbottomx = colcenterx;

				if(posY < yi)
				{
					if ((vx == 1 && belongsTo(colcenterx, colcentery, posY - size, xi - size, yi + size, posX + size)) ||
						(vx == 0 && belongsTo(colcenterx, colcentery, posY - size, posX - size, yi + size, xi + size)) ||
						(vx == 1 && belongsTo(colleftx, collefty, posY - size, xi - size, yi + size, posX + size)) ||
						(vx == 0 && belongsTo(colleftx, collefty, posY - size, posX - size, yi + size, xi + size)) ||
						(vx == 1 && belongsTo(colrightx, colrighty, posY - size, xi - size, yi + size, posX + size)) ||
						(vx == 0 && belongsTo(colrightx, colrighty, posY - size, posX - size, yi + size, xi + size)) ||
						(vx == 1 && belongsTo(coltopx, coltopy, posY - size, xi - size, yi + size, posX + size)) ||
						(vx == 0 && belongsTo(coltopx, coltopy, posY - size, posX - size, yi + size, xi + size)) ||
						(vx == 1 && belongsTo(colbottomx, colbottomy, posY - size, xi - size, yi + size, posX + size)) ||
						(vx == 0 && belongsTo(colbottomx, colbottomy, posY - size, posX - size, yi + size, xi + size))) 
					{
						s.caughtCollectible(colcenterx, colcentery);
						collectibles.RemoveRange(firstn, 2);
						nrcollectibles--;
						n--;
					}
				}
				else
				{
					if ((vx == 1 && belongsTo(colcenterx, colcentery, yi - size, xi - size, posY + size, posX + size)) ||
						(vx == 0 && belongsTo(colcenterx, colcentery, yi - size, posX - size, posY + size, xi + size)) ||
						(vx == 1 && belongsTo(colleftx, collefty, yi - size, xi - size, posY + size, posX + size)) ||
						(vx == 0 && belongsTo(colleftx, collefty, yi - size, posX - size, posY + size, xi + size)) ||
						(vx == 1 && belongsTo(colrightx, colrighty, yi - size, xi - size, posY + size, posX + size)) ||
						(vx == 0 && belongsTo(colrightx, colrighty, yi - size, posX - size, posY + size, xi + size)) ||
						(vx == 1 && belongsTo(coltopx, coltopy, yi - size, xi - size, posY + size, posX + size)) ||
						(vx == 0 && belongsTo(coltopx, coltopy, yi - size, posX - size, posY + size, xi + size)) ||
						(vx == 1 && belongsTo(colbottomx, colbottomy, yi - size, xi - size, posY + size, posX + size)) ||
						(vx == 0 && belongsTo(colbottomx, colbottomy, yi - size, posX - size, posY + size, xi + size))) 
					{
						s.caughtCollectible(colcenterx, colcentery);
						collectibles.RemoveRange(firstn, 2);
						nrcollectibles--;
						n--;
					}
				}
				
			}

			s.setCollectibles(collectibles);
		}

        //
        // belongsTo - Checks if coordinates (posX, posY) are inside the rectangle formed by top, left, bottom and right.
        //
		private Boolean belongsTo(float posX, float posY, float top, float left, float bottom, float right)
		{
			return ((posX >= left && posX <= right) && (posY <= bottom && posY >= top));
		}

	}
}

